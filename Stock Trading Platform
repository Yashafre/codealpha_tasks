import java.util.*;

// Class representing a stock in the market
class Stock {
    private String symbol;
    private double price;

    public Stock(String symbol, double price) {
        this.symbol = symbol;
        this.price = price;
    }

    public String getSymbol() {
        return symbol;
    }

    public double getPrice() {
        return price;
    }

    public void updatePrice(double newPrice) {
        this.price = newPrice;
    }
}

// Class representing a user's portfolio
class Portfolio {
    private Map<String, Integer> holdings = new HashMap<>();
    private double balance;

    public Portfolio(double initialBalance) {
        this.balance = initialBalance;
    }

    public double getBalance() {
        return balance;
    }

    public void deposit(double amount) {
        balance += amount;
    }

    public boolean buyStock(Stock stock, int quantity) {
        double cost = stock.getPrice() * quantity;
        if (balance >= cost) {
            balance -= cost;
            holdings.put(stock.getSymbol(), holdings.getOrDefault(stock.getSymbol(), 0) + quantity);
            return true;
        }
        return false;
    }

    public boolean sellStock(Stock stock, int quantity) {
        if (holdings.getOrDefault(stock.getSymbol(), 0) >= quantity) {
            holdings.put(stock.getSymbol(), holdings.get(stock.getSymbol()) - quantity);
            balance += stock.getPrice() * quantity;
            return true;
        }
        return false;
    }

    public void displayHoldings(Map<String, Stock> market) {
        System.out.println("\n=== Portfolio ===");
        double totalValue = balance;
        for (Map.Entry<String, Integer> entry : holdings.entrySet()) {
            String symbol = entry.getKey();
            int qty = entry.getValue();
            double stockValue = market.get(symbol).getPrice() * qty;
            System.out.println(symbol + ": " + qty + " shares, Value: $" + stockValue);
            totalValue += stockValue;
        }
        System.out.println("Cash Balance: $" + balance);
        System.out.println("Total Portfolio Value: $" + totalValue);
    }
}

// Main trading platform
public class StockTradingPlatform {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        // Market with some initial stocks
        Map<String, Stock> market = new HashMap<>();
        market.put("AAPL", new Stock("AAPL", 175.50));
        market.put("GOOG", new Stock("GOOG", 2850.75));
        market.put("TSLA", new Stock("TSLA", 720.30));

        // Create portfolio with $10,000 initial balance
        Portfolio portfolio = new Portfolio(10000);

        while (true) {
            System.out.println("\n=== Stock Trading Platform ===");
            System.out.println("1. View Market Data");
            System.out.println("2. Buy Stock");
            System.out.println("3. Sell Stock");
            System.out.println("4. View Portfolio");
            System.out.println("5. Exit");
            System.out.print("Choose an option: ");
            int choice = scanner.nextInt();

            switch (choice) {
                case 1:
                    System.out.println("\n=== Market Data ===");
                    for (Stock stock : market.values()) {
                        System.out.println(stock.getSymbol() + " - $" + stock.getPrice());
                    }
                    break;

                case 2:
                    System.out.print("Enter stock symbol to buy: ");
                    String buySymbol = scanner.next().toUpperCase();
                    if (market.containsKey(buySymbol)) {
                        System.out.print("Enter quantity: ");
                        int qty = scanner.nextInt();
                        if (portfolio.buyStock(market.get(buySymbol), qty)) {
                            System.out.println("Bought " + qty + " shares of " + buySymbol);
                        } else {
                            System.out.println("Not enough balance.");
                        }
                    } else {
                        System.out.println("Stock not found.");
                    }
                    break;

                case 3:
                    System.out.print("Enter stock symbol to sell: ");
                    String sellSymbol = scanner.next().toUpperCase();
                    if (market.containsKey(sellSymbol)) {
                        System.out.print("Enter quantity: ");
                        int qty = scanner.nextInt();
                        if (portfolio.sellStock(market.get(sellSymbol), qty)) {
                            System.out.println("Sold " + qty + " shares of " + sellSymbol);
                        } else {
                            System.out.println("Not enough shares.");
                        }
                    } else {
                        System.out.println("Stock not found.");
                    }
                    break;

                case 4:
                    portfolio.displayHoldings(market);
                    break;

                case 5:
                    System.out.println("Exiting... Goodbye!");
                    return;

                default:
                    System.out.println("Invalid option.");
            }
        }
    }
}
